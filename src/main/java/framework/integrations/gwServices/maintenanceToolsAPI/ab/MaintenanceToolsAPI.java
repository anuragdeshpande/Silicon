package framework.integrations.gwServices.maintenanceToolsAPI.ab;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.3.4
 * 2021-04-09T09:40:07.660-06:00
 * Generated source version: 3.3.4
 *
 */
@WebServiceClient(name = "MaintenanceToolsAPI",
                  wsdlLocation = "file:/D:/Work/IntellijProjects/Silicon/src/main/java/framework/integrations/gwServices/maintenanceToolsAPI/ab/ABMaintenance.wsdl",
                  targetNamespace = "http://guidewire.com/ab/ws/gw/webservice/ab/ab1000/MaintenanceToolsAPI")
public class MaintenanceToolsAPI extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://guidewire.com/ab/ws/gw/webservice/ab/ab1000/MaintenanceToolsAPI", "MaintenanceToolsAPI");
    public final static QName MaintenanceToolsAPISoap11Port = new QName("http://guidewire.com/ab/ws/gw/webservice/ab/ab1000/MaintenanceToolsAPI", "MaintenanceToolsAPISoap11Port");
    public final static QName MaintenanceToolsAPISoap12Port = new QName("http://guidewire.com/ab/ws/gw/webservice/ab/ab1000/MaintenanceToolsAPI", "MaintenanceToolsAPISoap12Port");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/Work/IntellijProjects/Silicon/src/main/java/framework/integrations/gwServices/maintenanceToolsAPI/ab/ABMaintenance.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(MaintenanceToolsAPI.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/Work/IntellijProjects/Silicon/src/main/java/framework/integrations/gwServices/maintenanceToolsAPI/ab/ABMaintenance.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public MaintenanceToolsAPI(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MaintenanceToolsAPI(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MaintenanceToolsAPI() {
        super(WSDL_LOCATION, SERVICE);
    }

    public MaintenanceToolsAPI(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public MaintenanceToolsAPI(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public MaintenanceToolsAPI(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns MaintenanceToolsAPIPortType
     */
    @WebEndpoint(name = "MaintenanceToolsAPISoap11Port")
    public MaintenanceToolsAPIPortType getMaintenanceToolsAPISoap11Port() {
        return super.getPort(MaintenanceToolsAPISoap11Port, MaintenanceToolsAPIPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MaintenanceToolsAPIPortType
     */
    @WebEndpoint(name = "MaintenanceToolsAPISoap11Port")
    public MaintenanceToolsAPIPortType getMaintenanceToolsAPISoap11Port(WebServiceFeature... features) {
        return super.getPort(MaintenanceToolsAPISoap11Port, MaintenanceToolsAPIPortType.class, features);
    }


    /**
     *
     * @return
     *     returns MaintenanceToolsAPIPortType
     */
    @WebEndpoint(name = "MaintenanceToolsAPISoap12Port")
    public MaintenanceToolsAPIPortType getMaintenanceToolsAPISoap12Port() {
        return super.getPort(MaintenanceToolsAPISoap12Port, MaintenanceToolsAPIPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MaintenanceToolsAPIPortType
     */
    @WebEndpoint(name = "MaintenanceToolsAPISoap12Port")
    public MaintenanceToolsAPIPortType getMaintenanceToolsAPISoap12Port(WebServiceFeature... features) {
        return super.getPort(MaintenanceToolsAPISoap12Port, MaintenanceToolsAPIPortType.class, features);
    }

}
