package framework.integrations.gwServices.messagingToolsAPI.bc;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.3.4
 * 2021-06-14T14:02:48.552-06:00
 * Generated source version: 3.3.4
 *
 */
@WebServiceClient(name = "MessagingToolsAPI",
                  wsdlLocation = "file:/D:/Work/IntellijProjects/Silicon/src/main/java/framework/integrations/gwServices/messagingToolsAPI/bc/BCMessagingTools.wsdl",
                  targetNamespace = "http://guidewire.com/bc/ws/gw/webservice/bc/MessagingToolsAPI")
public class MessagingToolsAPI extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://guidewire.com/bc/ws/gw/webservice/bc/MessagingToolsAPI", "MessagingToolsAPI");
    public final static QName MessagingToolsAPISoap12Port = new QName("http://guidewire.com/bc/ws/gw/webservice/bc/MessagingToolsAPI", "MessagingToolsAPISoap12Port");
    public final static QName MessagingToolsAPISoap11Port = new QName("http://guidewire.com/bc/ws/gw/webservice/bc/MessagingToolsAPI", "MessagingToolsAPISoap11Port");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/Work/IntellijProjects/Silicon/src/main/java/framework/integrations/gwServices/messagingToolsAPI/bc/BCMessagingTools.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(MessagingToolsAPI.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/Work/IntellijProjects/Silicon/src/main/java/framework/integrations/gwServices/messagingToolsAPI/bc/BCMessagingTools.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public MessagingToolsAPI(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public MessagingToolsAPI(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public MessagingToolsAPI() {
        super(WSDL_LOCATION, SERVICE);
    }

    public MessagingToolsAPI(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public MessagingToolsAPI(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public MessagingToolsAPI(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns MessagingToolsAPIPortType
     */
    @WebEndpoint(name = "MessagingToolsAPISoap12Port")
    public MessagingToolsAPIPortType getMessagingToolsAPISoap12Port() {
        return super.getPort(MessagingToolsAPISoap12Port, MessagingToolsAPIPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessagingToolsAPIPortType
     */
    @WebEndpoint(name = "MessagingToolsAPISoap12Port")
    public MessagingToolsAPIPortType getMessagingToolsAPISoap12Port(WebServiceFeature... features) {
        return super.getPort(MessagingToolsAPISoap12Port, MessagingToolsAPIPortType.class, features);
    }


    /**
     *
     * @return
     *     returns MessagingToolsAPIPortType
     */
    @WebEndpoint(name = "MessagingToolsAPISoap11Port")
    public MessagingToolsAPIPortType getMessagingToolsAPISoap11Port() {
        return super.getPort(MessagingToolsAPISoap11Port, MessagingToolsAPIPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns MessagingToolsAPIPortType
     */
    @WebEndpoint(name = "MessagingToolsAPISoap11Port")
    public MessagingToolsAPIPortType getMessagingToolsAPISoap11Port(WebServiceFeature... features) {
        return super.getPort(MessagingToolsAPISoap11Port, MessagingToolsAPIPortType.class, features);
    }

}
